version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sast
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../docs/schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  temporal:
    image: temporalio/auto-setup:1.22.3
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=postgres
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    ports:
      - "7233:7233"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./temporal_config:/etc/temporal/config/dynamicconfig

  temporal-ui:
    image: temporalio/ui:2.24.0
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:8080
    ports:
      - "8088:8080"
    depends_on:
      - temporal

  backend:
    build:
      context: ../backend
      dockerfile: ../deploy/Dockerfile.backend
    environment:
      - DB_URL=postgres://postgres:postgres@postgres:5432/sast?sslmode=disable
      - TEMPORAL_HOST=temporal:7233
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8080:8080"
    volumes:
      - ../backend:/app
    depends_on:
      - postgres
      - temporal
    command: ["go", "run", "main.go"]

  frontend:
    build:
      context: ../frontend
      dockerfile: ../deploy/Dockerfile.frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
    depends_on:
      - backend
    command: ["npm", "run", "dev"]

volumes:
  postgres_data:
